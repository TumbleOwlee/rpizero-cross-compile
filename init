#!/bin/bash

header() {
    echo ""
    echo "=================================================================================================="
    echo "  Step: $@"
    echo "=================================================================================================="
    echo ""
}

if [ "_$(whoami)" == "root" ]; then
    echo "Please don't run as root. Use a local user instead. The script will ask for sudo privileges when necessary."
    exit 1
fi

COMPILER_DIR="$(pwd)/env/compiler/armv6"
CHROOT_DIR="$(pwd)/env/chroot/armv6"

## Install requirements
header "Install requirements"
sudo apt-get update || exit 1
sudo apt-get install -y qemu-user-static binfmt-support debootstrap schroot || exit 1

# Install cross compiler
header "Retrieve cross compiler"
mkdir -p "$COMPILER_DIR"
wget https://github.com/tttapa/docker-arm-cross-toolchain/releases/latest/download/x-tools-armv6-rpi-linux-gnueabihf-gcc12.tar.xz -O- | tar xJ -C "$COMPILER_DIR" || exit 1
export PATH="$COMPILER_DIR/x-tools/armv6-rpi-linux-gnueabihf/bin:$PATH"

# Set up sysroot
header "Set up SYSROOT"
mkdir -p "$CHROOT_DIR" &>/dev/null
# Perform first stage of bootstrap
sudo debootstrap --arch armhf --foreign --no-check-gpg bookworm "$CHROOT_DIR" http://ftp.acc.umu.se/mirror/raspbian/raspbian/ || exit 1
# Copy qemu executables into chroot to be able to execute armv6 programs
sudo cp /usr/bin/qemu-arm* "$CHROOT_DIR/usr/bin" || exit 1
# Perform second stage to install packages
sudo chroot "$CHROOT_DIR" /debootstrap/debootstrap --second-stage || exit 1

# Install dependencies
header "Install dependencies in SYSROOT"
sudo chroot "$CHROOT_DIR" /usr/bin/apt-get update || exit 1
sudo chroot "$CHROOT_DIR" /usr/bin/apt-get install -y libcurl4-openssl-dev zlib1g-dev || exit 1
